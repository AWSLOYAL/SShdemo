pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare Node App') {
            steps {
                sh '''
                # Create app directory
                mkdir -p app

                # Create package.json
                cat > app/package.json <<'EOF'
{
  "name": "my-node-app",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {}
}
EOF

                # Create app.js
                cat > app/app.js <<'EOF'
const http = require('http');
const server = http.createServer((req, res) => {
    res.end('✅ Hello from Node.js inside Docker!');
});
server.listen(3000, () => console.log('🚀 Server running on port 3000'));
EOF
                '''
            }
        }

        stage('Create Docker Compose File') {
            steps {
                sh '''
                mkdir -p frappe_docker
                cat > frappe_docker/pwd.yml <<'EOF'
version: '3.8'

services:
  app:
    image: node:18-alpine
    container_name: my-node-app
    ports:
      - "3000:3000"
    working_dir: /usr/src/app
    volumes:
      - ./app:/usr/src/app
    command: sh -c "npm install && node app.js"
EOF
                '''
            }
        }

        stage('Validate Docker Compose File') {
            steps {
                sh 'docker-compose -f frappe_docker/pwd.yml config'
            }
        }

        stage('Clean Previous Container') {
            steps {
                sh '''
                if [ "$(docker ps -aq -f name=my-node-app)" ]; then
                    docker rm -f my-node-app || true
                fi
                '''
            }
        }

        stage('Deploy (docker-compose up)') {
            steps {
                sh 'docker-compose -f frappe_docker/pwd.yml up -d'
            }
        }

        stage('Test App Output') {
            steps {
                sh 'sleep 5 && curl http://localhost:3000'
            }
        }
    }

    post {
        failure {
            echo '❌ Deploy pipeline failed.'
        }
    }
}
